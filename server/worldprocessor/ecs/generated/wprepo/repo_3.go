// Code generated by entityrepo generator. DO NOT EDIT.
package wprepo

import (
	"github.com/justclimber/fda/common/ecs"
	"github.com/justclimber/fda/common/ecs/component"
	"github.com/justclimber/fda/common/ecs/entity"
	"github.com/justclimber/fda/common/ecs/entityrepo"
	"github.com/justclimber/fda/server/worldprocessor/ecs/wpcomponent"
)

type RepoForMask3 struct {
	cGroups  []entityrepo.CGroup
	repoLink ecs.EntityRepo
}

func NewRepoForMask3(repoLink ecs.EntityRepo) *RepoForMask3 {
	return &RepoForMask3{
		repoLink: repoLink,
	}
}

func (r *RepoForMask3) InitRepoLink(mask component.Mask) {
	r.cGroups = r.repoLink.GetCGroupsWithMask(mask)
}

func (r *RepoForMask3) Iterate(f func(
	id entity.Id,
	Position wpcomponent.Position,
	Moving wpcomponent.Moving,
) (*wpcomponent.Position, *wpcomponent.Moving)) {
	for _, cGroup := range r.cGroups {
		switch cg := cGroup.(type) {
		case *ECGroupMask3:
			for _, chunk := range cg.Chunks {
				for k := 0; k < chunk.Size; k++ {
					newPosition, newMoving := f(chunk.Ids[k], chunk.Position[k], chunk.Moving[k])

					if newPosition != nil {
						chunk.Position[k] = *newPosition
					}
					if newMoving != nil {
						chunk.Moving[k] = *newMoving
					}
				}
			}
		case *ECGroupMask7:
			for _, chunk := range cg.Chunks {
				for k := 0; k < chunk.Size; k++ {
					newPosition, newMoving := f(chunk.Ids[k], chunk.Position[k], chunk.Moving[k])

					if newPosition != nil {
						chunk.Position[k] = *newPosition
					}
					if newMoving != nil {
						chunk.Moving[k] = *newMoving
					}
				}
			}
		}
	}
}
